# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1azoOI9FgyVAtXs7Bzho61qYA4uBaDnwP
"""

import streamlit as st
import pandas as pd
import io

# --- ページ設定 ---
st.set_page_config(
    page_title="特徴量エンジニアリング支援アプリ",
    page_icon="🔧",
    layout="wide"
)

# --- 関数 ---
@st.cache_data # データ読み込みをキャッシュ
def load_csv(uploaded_file):
    """アップロードされたCSVをDataFrameとして読み込む"""
    try:
        df = pd.read_csv(uploaded_file)
        return df
    except Exception as e:
        st.error(f"エラー: ファイルを読み込めませんでした。CSVファイルか確認してください。 ({e})")
        return None

def convert_df_to_csv(df):
    """DataFrameをCSV形式のバイトデータに変換する"""
    return df.to_csv(index=False).encode('utf-8')


# --- メイン画面 ---
st.title("🔧 特徴量エンジニアリング支援アプリ")
st.write("CSVファイルをアップロードして、GUIで新しい特徴量を作成してみましょう。")

# --- サイドバー ---
st.sidebar.header("操作パネル")
uploaded_file = st.sidebar.file_uploader("ここにCSVファイルをアップロード", type=["csv"])

# --- アプリ本体 ---
if uploaded_file is not None:
    df = load_csv(uploaded_file)

    if df is not None:
        st.subheader("📊 元のデータフレーム")
        st.dataframe(df.head())

        # --- 特徴量作成の選択肢 ---
        st.sidebar.subheader("特徴量を作成")

        # 処理コードを保存するリスト
        generated_code = []

        # 1. FamilySizeの作成
        if 'sibsp' in df.columns and 'parch' in df.columns:
            if st.sidebar.checkbox("`FamilySize` を作成する", value=False):
                df['FamilySize'] = df['sibsp'] + df['parch'] + 1
                generated_code.append("df['FamilySize'] = df['sibsp'] + df['parch'] + 1")
        else:
            st.sidebar.warning("`FamilySize`の作成には`sibsp`と`parch`列が必要です。")

        # 2. IsAloneの作成 (FamilySizeが存在する場合のみ)
        if 'FamilySize' in df.columns:
            if st.sidebar.checkbox("`IsAlone` を作成する", value=False):
                df['IsAlone'] = 0
                df.loc[df['FamilySize'] == 1, 'IsAlone'] = 1
                generated_code.append("df['IsAlone'] = 0\ndf.loc[df['FamilySize'] == 1, 'IsAlone'] = 1")

        # 3. 年齢のカテゴリ化 (ビニング)
        if 'age' in df.columns:
            if st.sidebar.checkbox("`AgeGroup` を作成する", value=False):
                # 欠損値を中央値で補完
                median_age = df['age'].median()
                df['age_filled'] = df['age'].fillna(median_age)

                bins = [0, 12, 18, 35, 60, 100]
                labels = ['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior']
                df['AgeGroup'] = pd.cut(df['age_filled'], bins=bins, labels=labels, right=False)

                # 不要になった補完列を削除
                df = df.drop(columns=['age_filled'])

                generated_code.append(f"# 欠損値を中央値({median_age})で補完\ndf['age'] = df['age'].fillna({median_age})\n\nbins = [0, 12, 18, 35, 60, 100]\nlabels = ['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior']\ndf['AgeGroup'] = pd.cut(df['age'], bins=bins, labels=labels, right=False)")
        else:
            st.sidebar.warning("`AgeGroup`の作成には`age`列が必要です。")

        st.divider()

        # --- 結果表示 ---
        st.subheader("✨ 特徴量作成後のデータフレーム")
        st.dataframe(df.head())

        # --- コード表示 ---
        if generated_code:
            st.subheader("🐍 生成されたPythonコード")
            st.info("以下のコードで、今回の操作を再現できます。")
            full_code = "\n\n".join(generated_code)
            st.code(full_code, language='python')

        # --- ダウンロードボタン ---
        st.download_button(
           label="加工後のCSVをダウンロード",
           data=convert_df_to_csv(df),
           file_name='featured_data.csv',
           mime='text/csv',
        )

else:
    st.info("サイドバーからCSVファイルをアップロードして開始してください。")
    st.image("https://storage.googleapis.com/s4a-prod-share-staging/2022-09-22T06-03-51.341Z/csv-file.png", width=150)